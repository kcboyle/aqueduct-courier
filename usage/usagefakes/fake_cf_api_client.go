// Code generated by counterfeiter. DO NOT EDIT.
package usagefakes

import (
	"sync"
)

type FakeCfApiClient struct {
	GetUAAURLStub        func() (string, error)
	getUAAURLMutex       sync.RWMutex
	getUAAURLArgsForCall []struct {
	}
	getUAAURLReturns struct {
		result1 string
		result2 error
	}
	getUAAURLReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCfApiClient) GetUAAURL() (string, error) {
	fake.getUAAURLMutex.Lock()
	ret, specificReturn := fake.getUAAURLReturnsOnCall[len(fake.getUAAURLArgsForCall)]
	fake.getUAAURLArgsForCall = append(fake.getUAAURLArgsForCall, struct {
	}{})
	fake.recordInvocation("GetUAAURL", []interface{}{})
	fake.getUAAURLMutex.Unlock()
	if fake.GetUAAURLStub != nil {
		return fake.GetUAAURLStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getUAAURLReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCfApiClient) GetUAAURLCallCount() int {
	fake.getUAAURLMutex.RLock()
	defer fake.getUAAURLMutex.RUnlock()
	return len(fake.getUAAURLArgsForCall)
}

func (fake *FakeCfApiClient) GetUAAURLCalls(stub func() (string, error)) {
	fake.getUAAURLMutex.Lock()
	defer fake.getUAAURLMutex.Unlock()
	fake.GetUAAURLStub = stub
}

func (fake *FakeCfApiClient) GetUAAURLReturns(result1 string, result2 error) {
	fake.getUAAURLMutex.Lock()
	defer fake.getUAAURLMutex.Unlock()
	fake.GetUAAURLStub = nil
	fake.getUAAURLReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCfApiClient) GetUAAURLReturnsOnCall(i int, result1 string, result2 error) {
	fake.getUAAURLMutex.Lock()
	defer fake.getUAAURLMutex.Unlock()
	fake.GetUAAURLStub = nil
	if fake.getUAAURLReturnsOnCall == nil {
		fake.getUAAURLReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getUAAURLReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCfApiClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getUAAURLMutex.RLock()
	defer fake.getUAAURLMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCfApiClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
